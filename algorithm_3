##  给定一个二叉树，按高度由高到低依次打印从右侧视角看到的节点 ##


思路：大方向属于二叉树的层次遍历，只不过每次只关注每一层的最后一个（最右）节点，数据结构考虑使用队列，因为队列是先进先出的。，
首先取到并打印每一层的最后一个节点（最后入队），然后将队列中的每一个节点出队，并将其左右子节点按序入队，直至该层的最后一个
节点。


class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
}


void scanRightSide(TreeNode Root) {
        if (root == null) {
            return;
        }
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);

        while(!queue.isEmpty()) { //当队列取空的时候，就遍历完成
            TreeNode last = queue.getLast();
            println(last.val);   // 打印当前队列中的最后一个元素
            
            TreeNode item = null;
            do{
               item = queue.remove();
               if (item.left != null) {
                  queue.add(item.left);
               }
               if (item.right != null) {
                  queue.add(item.right);
               }
            } while(item != last);
        }
        return result;
}

